{"ast":null,"code":"\"use strict\";\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  return t;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst id_1 = require(\"./EditorState/id\");\n\nconst parseFlatState = raw => {\n  const state = {\n    value: [],\n    entityMap: raw.entityMap\n  };\n  let ignore = true;\n  raw.text.split('').forEach(char => {\n    if (char === '[') {\n      ignore = false;\n      const val = {\n        type: 'block-start',\n        blockKey: id_1.default()\n      };\n      state.value.push(val);\n    } else if (char === ']') {\n      ignore = true;\n      const val = {\n        type: 'block-end'\n      };\n      state.value.push(val);\n    } else if (ignore === false) {\n      const val = {\n        char,\n        styles: []\n      };\n      state.value.push(val);\n    }\n  });\n  raw.ranges.forEach(_a => {\n    var offset = _a.offset,\n        length = _a.length,\n        entityKey = _a.entity,\n        charData = __rest(_a, [\"offset\", \"length\", \"entity\"]);\n\n    for (var i = offset; i < offset + length; i++) {\n      const value = state.value[i];\n\n      if (value.type == null) {\n        const entity = entityKey != null && state.entityMap[entityKey];\n        const newValue = Object.assign({}, value, charData);\n\n        if (entity != null) {\n          newValue.entity = entity;\n        }\n\n        state.value[i] = newValue;\n      }\n    }\n  });\n  return state;\n};\n\nexports.default = parseFlatState;","map":null,"metadata":{},"sourceType":"script"}