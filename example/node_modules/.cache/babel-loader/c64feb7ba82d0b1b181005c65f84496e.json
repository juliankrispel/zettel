{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst getBlockForIndex_1 = require(\"../getBlockForIndex\");\n\nconst findRangeTarget = el => {\n  if (el == null) {\n    return null;\n  } else if (['#text', 'BR'].includes(el.nodeName)) {\n    return el;\n  } else if (el.childNodes) {\n    const childNodes = Array.from(el.childNodes);\n\n    for (let i = 0; i <= childNodes.length; i++) {\n      let child = findRangeTarget(childNodes[i]);\n\n      if (child != null) {\n        return child;\n      }\n    }\n  }\n\n  return null;\n};\n\nfunction setDomSelection(editorState, containerNode) {\n  const newSelection = window.getSelection();\n  const list = editorState.list;\n\n  const _getBlockForIndex_1$d = getBlockForIndex_1.default(list.value, editorState.start),\n        startBlock = _getBlockForIndex_1$d.block,\n        startBlockOffset = _getBlockForIndex_1$d.blockOffset;\n\n  const _getBlockForIndex_1$d2 = getBlockForIndex_1.default(list.value, editorState.end),\n        endBlock = _getBlockForIndex_1$d2.block,\n        endBlockOffset = _getBlockForIndex_1$d2.blockOffset;\n\n  if (startBlock == null || endBlock == null) {\n    throw new Error('cannot select current start and end position');\n  }\n\n  const startNodes = containerNode.querySelectorAll(\"[data-block-key=\\\"\".concat(startBlock.blockKey, \"\\\"]\"));\n  const endNodes = containerNode.querySelectorAll(\"[data-block-key=\\\"\".concat(endBlock.blockKey, \"\\\"]\"));\n  const startOffset = editorState.start - startBlockOffset;\n  const endOffset = editorState.end - endBlockOffset;\n  const startFragment = Array.from(startNodes).find(node => {\n    return parseInt(node.dataset.fragmentStart) <= startOffset && parseInt(node.dataset.fragmentEnd) >= startOffset;\n  });\n\n  if (startFragment == null) {\n    return;\n  }\n\n  const startFragmentOffset = parseInt(startFragment.dataset.fragmentStart);\n  const endFragment = Array.from(endNodes).find(node => {\n    return parseInt(node.dataset.fragmentStart) <= endOffset && parseInt(node.dataset.fragmentEnd) >= endOffset;\n  });\n  const endFragmentOffset = parseInt(endFragment.dataset.fragmentStart);\n  const startNode = findRangeTarget(startFragment);\n  const endNode = findRangeTarget(endFragment);\n  newSelection && newSelection.removeAllRanges();\n  const range = document.createRange();\n\n  if (startNode != null && endNode != null) {\n    range.setStart(startNode, startOffset - startFragmentOffset);\n    range.setEnd(endNode, endOffset - endFragmentOffset);\n    newSelection && newSelection.addRange(range);\n  }\n}\n\nexports.default = setDomSelection;","map":null,"metadata":{},"sourceType":"script"}