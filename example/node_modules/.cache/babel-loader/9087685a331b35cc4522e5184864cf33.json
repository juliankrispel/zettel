{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst rawToFlat_1 = require(\"../rawToFlat\");\n\nconst change_1 = require(\"./change\");\n\nconst flatToTree_1 = require(\"../flatToTree\");\n\nconst emptyList = {\n  value: [],\n  entityMap: {}\n};\n\nclass EditorState {\n  constructor({\n    start = 1,\n    end = 1,\n    list = emptyList,\n    undoStack = [],\n    redoStack = []\n  }) {\n    this.redoStack = [];\n    this.undoStack = [];\n    this.list = list;\n    this.undoStack = undoStack;\n    this.start = start;\n    this.end = end;\n    this.redoStack = redoStack;\n    this.tree = flatToTree_1.default(this.list);\n  }\n\n  change(_change) {\n    const update = {\n      current: this.list,\n      change: _change\n    };\n    const updated = change_1.default(update);\n    return new EditorState({\n      start: updated.change.start,\n      end: updated.change.end,\n      list: updated.current,\n      redoStack: this.redoStack,\n      undoStack: [updated.change].concat(this.undoStack)\n    });\n  }\n\n  undo() {\n    if (this.undoStack.length === 0) {\n      return this;\n    }\n\n    const lastUndo = this.undoStack.shift();\n    const updated = change_1.default({\n      current: this.list,\n      change: Object.assign({}, lastUndo, {\n        start: lastUndo.start + 1,\n        end: lastUndo.end + 1\n      })\n    });\n    return new EditorState({\n      start: updated.change.start,\n      end: updated.change.end,\n      list: updated.current,\n      redoStack: [updated.change].concat(this.redoStack),\n      undoStack: this.undoStack\n    });\n  }\n\n  redo() {\n    if (this.redoStack.length === 0) {\n      return this;\n    }\n\n    const lastRedo = this.redoStack.shift();\n    const updated = change_1.default({\n      current: this.list,\n      change: Object.assign({}, lastRedo, {\n        start: lastRedo.start + 1,\n        end: lastRedo.end + 1\n      })\n    });\n    return new EditorState({\n      start: updated.change.start,\n      end: updated.change.end,\n      list: updated.current,\n      redoStack: this.redoStack,\n      undoStack: [updated.change].concat(this.undoStack)\n    });\n  }\n\n  static fromJSON(json) {\n    return new EditorState({\n      list: rawToFlat_1.default(json)\n    });\n  }\n\n}\n\nexports.default = EditorState;","map":null,"metadata":{},"sourceType":"script"}