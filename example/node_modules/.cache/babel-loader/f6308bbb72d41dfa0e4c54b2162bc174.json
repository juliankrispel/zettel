{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst getNode = (state, path) => {\n  return path.reduce((acc, val) => {\n    return acc.blocks[val];\n  }, state);\n};\n\nconst getNodes = (state, path) => {\n  if (path.length === 0) {\n    return state.blocks;\n  } else {\n    return path.reduce((acc, val) => {\n      return acc[val].blocks || acc;\n    }, state.blocks);\n  }\n};\n\nconst parseBlockTree = flat => {\n  const state = {\n    blocks: [],\n    entityMap: {}\n  };\n  let path = [];\n  flat.value.forEach((char, index) => {\n    if (char.type === 'block-start') {\n      const blocks = getNodes(state, path);\n      blocks.push({\n        value: [],\n        blocks: [],\n        blockKey: char.blockKey\n      });\n      path.push(blocks.length - 1);\n    } else if (char.type === 'block-end') {\n      path.pop();\n    } else {\n      if (path.length === 0) {\n        throw new Error(\"Invalid List State\");\n      }\n\n      const node = getNode(state, path);\n      node.value.push(char);\n    }\n  });\n  return state;\n};\n\nexports.default = parseBlockTree;","map":null,"metadata":{},"sourceType":"script"}