{"ast":null,"code":"import _slicedToArray from \"/Users/juliankrispel/projects/zettel-new/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/juliankrispel/projects/zettel-new/example/src/App.tsx\";\nimport React, { useRef, useState, useLayoutEffect } from 'react';\nimport './App.css';\nimport { onKeyDown, onPaste, EditorState, setDomSelection, createTextFragments } from '@zettel/core';\nconst editorStyles = {\n  whiteSpace: 'pre-wrap',\n  overflowWrap: 'break-word',\n  userSelect: 'text',\n  outline: 'none'\n};\n\nconst Text = props => {\n  const block = props.block,\n        editorState = props.editorState;\n  let offset = 0;\n  const fragments = createTextFragments(block, editorState.list.entityMap);\n  /*\n  return <div>\n    <span {...fragmentProps}>\n    {block.value.map(val => val.char).join('') || <br {...fragmentProps}/>}\n    </span>\n  </div>\n  */\n\n  let textFragments = text;\n\n  if (text != null && text.length > 0 && editorState != null) {\n    const fragments = createTextFragments(block, editorState.list.entityMap);\n    let offset = 0;\n    textFragments = fragments.map(fragment => {\n      const fragmentProps = {\n        key: \"\".concat(block.blockKey, \"-\").concat(offset),\n        'data-block-key': block.blockKey,\n        'data-fragment-start': offset,\n        'data-fragment-end': offset + fragment.text.length,\n        className: fragment.styles.join(' ')\n      };\n      let textFragment = React.createElement(\"span\", Object.assign({}, fragmentProps, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      }), fragment.text || React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      }));\n      offset += fragment.text.length;\n      return textFragment;\n    });\n  } else {\n    textFragments = React.createElement(\"span\", {\n      key: block.blockKey,\n      \"data-block-key\": block.blockKey,\n      \"data-fragment-start\": 0,\n      \"data-fragment-end\": 0,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }));\n  }\n\n  return React.createElement(React.Fragment, null, textFragments);\n};\n\nfunction Blocks({\n  blocks,\n  editorState\n}) {\n  return React.createElement(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }, blocks.map(block => {\n    return React.createElement(BlockComp, {\n      key: block.blockKey,\n      block: block,\n      editorState: editorState,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    });\n  }));\n}\n\nconst BlockComp = props => {\n  return React.createElement(\"li\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }, React.createElement(Text, {\n    block: props.block,\n    editorState: props.editorState,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }), props.block.blocks.length > 0 && React.createElement(Blocks, {\n    blocks: props.block.blocks,\n    editorState: props.editorState,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }));\n};\n\nconst text = \"[Hello World\\n[This is evil\\n[Nesting\\n[Nestnig]]]]\";\n\nconst App = () => {\n  const _useState = useState(EditorState.fromJSON({\n    text,\n    ranges: [{\n      offset: 3,\n      length: 5,\n      styles: ['bold']\n    }, {\n      offset: 7,\n      length: 10,\n      styles: ['italic']\n    }],\n    entityMap: {}\n  })),\n        _useState2 = _slicedToArray(_useState, 2),\n        editorState = _useState2[0],\n        setEditorState = _useState2[1];\n\n  const ref = useRef(null);\n  useLayoutEffect(() => {\n    const container = ref.current;\n\n    if (container != null) {\n      setDomSelection(editorState, container);\n    }\n  });\n  return React.createElement(\"div\", {\n    onKeyDown: event => setEditorState(onKeyDown(editorState, event.nativeEvent)),\n    suppressContentEditableWarning: true,\n    style: editorStyles,\n    onPaste: event => setEditorState(onPaste(editorState, event.nativeEvent)),\n    ref: ref,\n    contentEditable: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120\n    },\n    __self: this\n  }, React.createElement(Blocks, {\n    blocks: editorState.tree.blocks,\n    editorState: editorState,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128\n    },\n    __self: this\n  }));\n};\n\nexport default App;","map":{"version":3,"sources":["/Users/juliankrispel/projects/zettel-new/example/src/App.tsx"],"names":["React","useRef","useState","useLayoutEffect","onKeyDown","onPaste","EditorState","setDomSelection","createTextFragments","editorStyles","whiteSpace","overflowWrap","userSelect","outline","Text","props","block","editorState","offset","fragments","list","entityMap","textFragments","text","length","map","fragment","fragmentProps","key","blockKey","className","styles","join","textFragment","Blocks","blocks","BlockComp","App","fromJSON","ranges","setEditorState","ref","container","current","event","nativeEvent","tree"],"mappings":"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","sourcesContent":["import React, { useRef, useState, useLayoutEffect } from 'react';\nimport './App.css';\nimport {\n  onKeyDown,\n  onPaste,\n  EditorState,\n  setDomSelection,\n  createTextFragments,\n  Block,\n} from '@zettel/core'\n\n\nconst editorStyles: React.CSSProperties = {\n  whiteSpace: 'pre-wrap',\n  overflowWrap: 'break-word',\n  userSelect: 'text',\n  outline: 'none'\n}\n\ntype TextProps = {\n  block: Block,\n  editorState: EditorState\n}\n\nconst Text = (props: TextProps) => {\n  const { block,  editorState } = props\n\n  let offset = 0\n  const fragments = createTextFragments(block, editorState.list.entityMap)\n\n  /*\n  return <div>\n    <span {...fragmentProps}>\n    {block.value.map(val => val.char).join('') || <br {...fragmentProps}/>}\n    </span>\n  </div>\n  */\n  let textFragments: React.ReactNode = text\n\n  if (text != null && text.length > 0 && editorState != null) {\n    const fragments = createTextFragments(block, editorState.list.entityMap)\n\n    let offset = 0\n\n    textFragments = fragments.map(fragment => {\n      const fragmentProps = {\n        key: `${block.blockKey}-${offset}`,\n        'data-block-key': block.blockKey,\n        'data-fragment-start': offset,\n        'data-fragment-end': offset + fragment.text.length,\n        className: fragment.styles.join(' ')\n      }\n\n      let textFragment: React.ReactNode = <span\n        {...fragmentProps}\n      >{fragment.text || <br />}</span>\n\n      offset += fragment.text.length\n      return textFragment\n    })\n  } else {\n    textFragments = <span\n      key={block.blockKey}\n      data-block-key={block.blockKey}\n      data-fragment-start={0}\n      data-fragment-end={0}\n    ><br /></span>\n  }\n\n  return <>{textFragments}</>\n}\n\nfunction Blocks({ blocks, editorState }: { blocks: Block[], editorState: EditorState }) {\n  return <ul>{blocks.map(block => {\n    return <BlockComp\n      key={block.blockKey}\n      block={block}\n      editorState={editorState}\n    />\n  })}</ul>\n}\n\nconst BlockComp = (props: {block: Block, editorState: EditorState}) => {\n  return <li>\n    <Text block={props.block} editorState={props.editorState} />\n    {props.block.blocks.length > 0 && <Blocks blocks={props.block.blocks} editorState={props.editorState} /> }\n  </li>\n}\n\nconst text = `[Hello World\n[This is evil\n[Nesting\n[Nestnig]]]]`\n\nconst App = () => {\n  const [editorState, setEditorState] = useState(EditorState.fromJSON({\n    text,\n    ranges: [{\n      offset: 3,\n      length: 5,\n      styles: ['bold']\n    }, {\n      offset: 7,\n      length: 10,\n      styles: ['italic']\n    }],\n    entityMap: {}\n  }))\n\n  const ref = useRef(null)\n\n  useLayoutEffect(() => {\n    const container = ref.current\n    if (container != null) {\n      setDomSelection(editorState, container)\n    }\n  })\n\n  return (\n    <div\n      onKeyDown={(event) => setEditorState(onKeyDown(editorState, event.nativeEvent))}\n      suppressContentEditableWarning\n      style={editorStyles}\n      onPaste={(event) => setEditorState(onPaste(editorState, event.nativeEvent))}\n      ref={ref}\n      contentEditable={true}\n      >\n      <Blocks blocks={editorState.tree.blocks} editorState={editorState} />\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}