{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nfunction hasEqualCharacterData(left = {\n  styles: []\n}, right = {\n  styles: []\n}) {\n  return left != null && right != null && right.entity === left.entity && Array.from(left.styles || []).sort().join('') === Array.from(right.styles || []).sort().join('');\n}\n\nfunction createTextFragments(block, entityMap = {}) {\n  const start = [];\n  return block.value.reduce((acc, data, index) => {\n    if (acc.length < 1) {\n      return [{\n        styles: data.styles,\n        entity: data.entity,\n        offset: index,\n        text: block.value[index].char\n      }];\n    } else {\n      const lastFragment = acc[acc.length - 1];\n\n      if (hasEqualCharacterData(lastFragment, data)) {\n        return acc.slice(0, -1).concat([Object.assign({}, lastFragment, {\n          text: lastFragment.text + block.value[index].char\n        })]);\n      } else {\n        return [...acc, {\n          styles: data.styles,\n          entity: data.entity,\n          offset: index,\n          text: block.value[index].char\n        }];\n      }\n    }\n  }, start).map(fragment => Object.assign({}, fragment, {\n    entity: fragment.entity != null ? entityMap[fragment.entity] : null\n  }));\n}\n\nexports.default = createTextFragments;","map":null,"metadata":{},"sourceType":"script"}