[
  {
    "file": "/Users/juliankrispel/projects/zettel-new/react/src/types.ts",
    "nodes": [
      {
        "docComment": "Render",
        "kind": "TypeAliasDeclaration",
        "name": "RenderStyle",
        "type": "React.FunctionComponent<{\n  style: string,\n  children: React.ReactElement\n}>"
      }
    ]
  },
  {
    "file": "/Users/juliankrispel/projects/zettel-new/react/src/Editor.tsx",
    "nodes": [
      {
        "name": null,
        "kind": "VariableStatement",
        "docComment": "Editor Component",
        "parameters": [
          {
            "isOptional": false,
            "name": "props",
            "type": {
              "mapBlock": "(block: Block) => Block",
              "renderBlock": "RenderBlock",
              "renderChildren": "RenderChildren",
              "renderStyle": "RenderStyle",
              "renderTextFragment": "RenderTextFragment",
              "onChange": "(editorState: EditorState) => void",
              "editorState": "EditorState",
              "htmlAttrs": "Object",
              "onKeyDown": "(event: React.KeyboardEvent) => EditorState | void",
              "readOnly": "boolean"
            }
          }
        ],
        "type": "React.ReactElement"
      }
    ]
  },
  {
    "file": "/Users/juliankrispel/projects/zettel-new/core/src/types.ts",
    "nodes": [
      {
        "docComment": "Container for Entities",
        "kind": "TypeAliasDeclaration",
        "name": "EntityMap",
        "type": {}
      },
      {
        "docComment": "Entity ftw!",
        "kind": "TypeAliasDeclaration",
        "name": "Entity",
        "type": {}
      },
      {
        "docComment": "State of a document.\nUsed to create derived states such as BlockTree,\nRawDocument or any other",
        "kind": "TypeAliasDeclaration",
        "name": "ListState",
        "type": {}
      },
      {
        "docComment": "Array of Characters",
        "kind": "TypeAliasDeclaration",
        "name": "Value",
        "type": "Character[]"
      },
      {
        "docComment": "Represents the beginning of a block",
        "kind": "TypeAliasDeclaration",
        "name": "BlockStart",
        "type": {}
      },
      {
        "docComment": "Represents the end of a block, there\nhas toe be a matching",
        "kind": "TypeAliasDeclaration",
        "name": "BlockEnd",
        "type": {}
      },
      {
        "docComment": "Embodies all possible changes made to doc",
        "kind": "TypeAliasDeclaration",
        "name": "Change",
        "type": {}
      },
      {
        "docComment": "History",
        "kind": "TypeAliasDeclaration",
        "name": "Changes",
        "type": "Change[]"
      },
      {
        "docComment": "Represents raw form of a Zettel Document,\nserializable and easier on the human eye",
        "kind": "TypeAliasDeclaration",
        "name": "RawDocument",
        "type": {}
      },
      {
        "docComment": "Ranges in RawDocument\nUsed to style text and relate to entities",
        "kind": "TypeAliasDeclaration",
        "name": "RawRange",
        "type": {}
      },
      {
        "docComment": "Tree representation of content. Used for\nrendering only",
        "kind": "TypeAliasDeclaration",
        "name": "BlockTree",
        "type": {}
      },
      {
        "docComment": "Represents one node in a tree\nUsed for rendering",
        "kind": "TypeAliasDeclaration",
        "name": "Block",
        "type": {}
      },
      {
        "kind": "InterfaceDeclaration",
        "text": "export interface EditorState {\n  /**\n   * @method change()\n   * \n   * `EditorState.change({ start: 9, end: 18, value: [] })`\n   */\n  change: (changes: Change[]) => EditorState;\n\n  /**\n   * @method undo()\n   * \n   * `EditorState.undo()`\n   */\n  undo: () => EditorState;\n\n  /**\n   * @method redo()\n   * \n   * `EditorState.redo()`\n   */\n  redo: () => EditorState;\n\n  readonly list: ListState;\n  readonly tree: BlockTree;\n}"
      },
      {
        "kind": "PropertySignature",
        "text": "change: (changes: Change[]) => EditorState;"
      },
      {
        "kind": "PropertySignature",
        "text": "undo: () => EditorState;"
      },
      {
        "kind": "PropertySignature",
        "text": "redo: () => EditorState;"
      }
    ]
  },
  {
    "file": "/Users/juliankrispel/projects/zettel-new/core/src/EditorState/change.ts",
    "nodes": [
      {
        "docComment": "Represents the input and output for updates",
        "kind": "TypeAliasDeclaration",
        "name": "Update",
        "type": {}
      },
      {
        "name": "change",
        "kind": "FunctionDeclaration",
        "docComment": "takes State and Change object, return a state\nobject that has been updated with the Change, and\na Change object to undo the change",
        "type": "Update",
        "parameters": [
          {
            "isOptional": false,
            "name": "update",
            "type": "Update"
          }
        ]
      }
    ]
  },
  {
    "file": "/Users/juliankrispel/projects/zettel-new/core/src/EditorState/EditorState.ts",
    "nodes": [
      {
        "name": "getSelectedValue",
        "kind": "MethodDeclaration",
        "docComment": "gets selected value, arguments default\nto editorState.start and editorState.end",
        "type": "Value",
        "parameters": [
          {
            "isOptional": false,
            "name": "start",
            "type": "number"
          },
          {
            "isOptional": false,
            "name": "end",
            "type": "number"
          }
        ]
      },
      {
        "name": "fromJSON",
        "kind": "MethodDeclaration",
        "docComment": "creates a new EditorState from JSON format",
        "type": "EditorState",
        "parameters": [
          {
            "isOptional": false,
            "name": "json",
            "type": "RawDocument"
          }
        ]
      }
    ]
  },
  {
    "file": "/Users/juliankrispel/projects/zettel-new/core/src/getBlocksForRange.ts",
    "nodes": [
      {
        "name": "getBlocksForRange",
        "kind": "FunctionDeclaration",
        "docComment": "Gets block indeces for range (start, end)",
        "type": "BlockAndIndex[]",
        "parameters": [
          {
            "isOptional": false,
            "name": "value",
            "type": "Value"
          },
          {
            "isOptional": false,
            "name": "start",
            "type": "number"
          },
          {
            "isOptional": false,
            "name": "end",
            "type": "number"
          }
        ]
      }
    ]
  },
  {
    "file": "/Users/juliankrispel/projects/zettel-new/core/src/textToListIndex.ts",
    "nodes": [
      {
        "name": "textToListIndex",
        "kind": "FunctionDeclaration",
        "docComment": "Maps text index to list index",
        "type": "number",
        "parameters": [
          {
            "isOptional": false,
            "name": "value",
            "type": "Value"
          },
          {
            "isOptional": false,
            "name": "textIndex",
            "type": "number"
          }
        ]
      }
    ]
  }
]