{"version":3,"sources":["examples/ItalicAndBold/index.tsx","components/Button/index.tsx","examples/BlockStyling/index.tsx","examples/PlainText/index.tsx","examples/Tree/index.tsx","examples/Table/index.tsx","examples/MarkdownTest/index.tsx","examples/Nocode/StyleEditor.tsx","examples/Nocode/index.tsx","examples/Changes/index.tsx","examples/Draggable/index.tsx","examples/TimeTravel/Timeline.tsx","examples/TimeTravel/index.tsx","examples/index.tsx","typography.ts","index.tsx","components/Button/index.module.css"],"names":["App","useState","EditorState","fromJSON","text","ranges","offset","length","styles","entityMap","editorState","setEditorState","renderStyle","props","style","children","htmlAttrs","className","onKeyDown","event","key","metaKey","toggleStyle","onChange","button","Button","onClick","blocks","getBlocksForRange","list","value","start","end","_editorState","reduce","newEditorState","block","blockOffset","change","includes","isBoundary","renderBlock","spellCheck","autoFocus","entity","type","CellBlock","RowBlock","TableBlock","Code","valueToText","slice","matches","match","prism","languages","actualText","substr","tokenize","forEach","token","processToken","console","log","split","_char","char","push","Array","isArray","content","_tok","toString","fragments","createTextFragments","color","background","padding","reduceToText","currentText","fragment","startsWith","Toggle","styled","div","Aside","aside","Inside","onSelectStyle","isOpen","setIsOpen","selectedStyle","setSelectedStyle","styleKeys","Object","keys","target","map","onMouseDown","preventDefault","newStyles","onKeyUp","name","placeholder","Container","useStyles","createPersistedState","useEditorState","setStyles","Fragment","span","Block","StyleEditor","styleList","getBlockForIndex","val","Error","currentChanges","setCurrentChanges","hasError","setHasError","submitChange","changes","JSON","parse","err","emptyPositions","positions","setPosition","handle","position","blockKey","onStop","x","y","updatePosition","scale","contentEditable","recurse","num","method","Timeline","undoStack","redoStack","_","index","undo","item","redo","Examples","PlainText","Changes","Nocode","ItalicAndBold","BlockStyling","MarkdownTest","Tree","Draggable","Table","Typography","baseFontSize","baseLineHeight","headerFontFamily","bodyFontFamily","injectStyles","Readme","lazy","Changelog","article","Content","fallback","exampleModules","_routeComps","path","toLowerCase","replace","component","history","createBrowserHistory","Layout","routeComps","flag","setFlag","toggleFlag","id","onMouseUp","to","route","i","Root","render","rootElement","document","getElementById","hasChildNodes","hydrate","module","exports"],"mappings":"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","file":"static/js/main.5a9cf364.chunk.js","sourcesContent":["import * as React from 'react';\nimport { useState } from 'react'\nimport { EditorState } from '@zettel/core'\nimport Editor from '@zettel/react'\n\nconst text = `[Italic][And Bold]`\n\nconst App = () => {\n  const [editorState, setEditorState] = useState(() => EditorState.fromJSON({\n    text,\n    ranges: [{\n      offset: 0,\n      length: 5,\n      styles: ['bold'],\n    }, {\n      offset: 3,\n      length: 10,\n      styles: ['italic'],\n    }],\n    entityMap: {}\n  }))\n\n  return (\n    <Editor\n      renderStyle={(props) => {\n        if (props.style === 'bold') {\n          return <strong>{props.children}</strong>\n        } else if (props.style === 'italic') {\n          return <i>{props.children}</i>\n        } else if (props.style === 'underline') {\n          return <u>{props.children}</u>\n        }\n\n        return <>{props.children}</>\n      }}\n      htmlAttrs={{ className: 'editor'}}\n      onKeyDown={(event) => {\n        if (event.key === 'b' && event.metaKey) {\n          return editorState.toggleStyle('bold')\n        } else if (event.key === 'i' && event.metaKey) {\n          return editorState.toggleStyle('italic')\n        } else if (event.key === 'u' && event.metaKey) {\n          return editorState.toggleStyle('underline')\n        }\n      }}\n      onChange={setEditorState}\n      editorState={editorState}\n    />\n  );\n}\n\nexport default App;\n","import * as React from 'react'\nimport styles from './index.module.css'\n\ntype Props = {\n  children: any,\n  onClick?: React.MouseEventHandler\n}\n\nexport default function ({ children, ...props }: Props) {\n  return <button className={styles.button} {...props}>\n    {children}\n  </button>\n}","import * as React from 'react';\nimport { useState } from 'react'\nimport { EditorState, getBlocksForRange } from '@zettel/core'\nimport Editor from '@zettel/react'\nimport { Button } from '../../components'\n\nconst text = `[Headline 1][Headline 2][A paragraph]`\n\nconst App = () => {\n  const [editorState, setEditorState] = useState(() => EditorState.fromJSON({\n    text,\n    ranges: [{\n      offset: 0,\n      length: 1,\n      styles: ['H1']\n    }, {\n      offset: 12,\n      length: 1,\n      styles: ['H2']\n    }],\n    entityMap: {}\n  }))\n\n  return (\n    <>\n      <div>\n        <Button onClick={() => {\n          const blocks = getBlocksForRange(editorState.list.value, editorState.start, editorState.end)\n          const { start, end } = editorState\n\n          const _editorState = blocks.reduce((newEditorState, block) => {\n            // @ts-ignore\n            const value: BlockStart = newEditorState.list.value[block.blockOffset]\n            return newEditorState.change({\n              start: block.blockOffset - 1,\n              end: block.blockOffset,\n              value: [{\n                ...value,\n                styles: (value.styles || []).includes('H1') ? [] : ['H1'],\n              }]\n            })\n          }, editorState)\n          .change({ start, end, isBoundary: true })\n          setEditorState(_editorState)\n        }}>\n          H1\n        </Button>\n      </div>\n      <Editor\n        renderBlock={(props) => {\n          const { htmlAttrs, children, block } = props\n          if (block.styles != null) {\n            if (block.styles.includes('H1')) {\n              return <h1 {...htmlAttrs}>{children}</h1>\n            } else if (block.styles.includes('H2')) {\n              return <h2 {...htmlAttrs}>{children}</h2>\n            }\n          }\n          return <div {...htmlAttrs}>{children}</div>\n        }}\n        htmlAttrs={{ className: 'editor'}}\n        onChange={setEditorState}\n        editorState={editorState}\n      />\n    </>\n  );\n}\n\nexport default App;\n","import * as React from 'react';\nimport { useState } from 'react'\nimport { EditorState } from '@zettel/core'\nimport Editor from '@zettel/react'\n\nconst text = `[One 😅Line][And another line of text][And another line]`\n\nconst App = () => {\n  const [editorState, setEditorState] = useState(() => EditorState.fromJSON({\n    text,\n    ranges: [],\n    entityMap: {}\n  }))\n\n  return (\n    <Editor\n      htmlAttrs={{ spellCheck: false, autoFocus: true, className: 'editor'}}\n      onChange={setEditorState}\n      editorState={editorState}\n    />\n  );\n}\n\nexport default App;\n","import * as React from 'react';\nimport { useState } from 'react'\nimport { EditorState } from '@zettel/core'\nimport Editor, { EditorChildren } from '@zettel/react'\nimport './index.css'\n\nconst text = `[One Line[Another line[And another line]]][And another line of text][And another line]`\n\nconst App = () => {\n  const [editorState, setEditorState] = useState(() => EditorState.fromJSON({\n    text,\n    ranges: [],\n    entityMap: {}\n  }))\n\n  return (\n    <Editor\n      htmlAttrs={{ spellCheck: false, autoFocus: true, className: 'editor'}}\n      onChange={setEditorState}\n      renderBlock={(props) => {\n        const { htmlAttrs, children } = props\n        return <div {...htmlAttrs} className=\"tree-node\">\n          {children}\n          <EditorChildren {...props} blocks={props.block.blocks} />\n        </div>\n      }}\n      editorState={editorState}\n    />\n  );\n}\n\nexport default App;\n","import * as React from 'react';\nimport { useState } from 'react'\nimport { EditorState } from '@zettel/core'\nimport Editor, { RenderBlock, EditorChildren, DefaultRenderBlock } from '@zettel/react'\nimport './index.css'\n\nconst text = `[[[One][Two]][[Three][Four]]][And a paragraph]`\n\nconst ranges = [{\n  offset: 0,\n  length: 1,\n  styles: [],\n  entity: '1'\n}]\n\nconst entityMap = {\n  '1': {\n    type: 'table'\n  }\n}\n\nconst CellBlock: RenderBlock = (props) => {\n  const { htmlAttrs, children } = props\n\n  return <td {...htmlAttrs}>\n    {children}\n  </td>\n}\n\nconst RowBlock: RenderBlock = (props) => {\n  const { htmlAttrs, block } = props\n\n  return <tr {...htmlAttrs}>\n    <EditorChildren\n      {...props}\n      renderBlock={CellBlock}\n      blocks={block.blocks}\n    />\n  </tr>\n\n}\n\n// @ts-ignore\nconst TableBlock: RenderBlock = (props) => {\n  const { htmlAttrs, block } = props\n  const { entity } = block\n\n  if (entity != null && entity.type === 'table') {\n    return <table {...htmlAttrs}>\n      <tbody>\n        <EditorChildren\n          {...props}\n          renderBlock={RowBlock}\n          blocks={block.blocks}\n        />\n      </tbody>\n    </table>\n  }\n\n  return <DefaultRenderBlock {...props}/>\n}\n\nconst App = () => {\n  const [editorState, setEditorState] = useState(() => EditorState.fromJSON({\n    text,\n    ranges,\n    entityMap\n  }))\n\n  return (\n    <Editor\n      htmlAttrs={{ spellCheck: false, autoFocus: true, className: 'editor'}}\n      renderBlock={TableBlock}\n      onChange={setEditorState}\n      editorState={editorState}\n    />\n  );\n}\n\nexport default App;\n","import * as React from 'react';\nimport { useState } from 'react'\nimport { EditorState, Fragment, valueToText, TextCharacter, createTextFragments } from '@zettel/core'\nimport Editor, { EditorText } from '@zettel/react'\nimport prism from 'prismjs'\nimport './prism.css'\n\nconst text = `[# Some markdown]\n[\\`\\`\\`js\\nconsole.log('boom')\\nfunction sum(a,b){\\n  return a + b;\\n}]\n[> And here's a block quote]\n`\n\nconst processToken = (token: any, value: TextCharacter[]) => {\n  console.log({ token })\n  if (typeof token === 'string') {\n    token.split('').forEach(_char => {\n      const char: TextCharacter  = {\n        char: _char\n      }\n      value.push(char)\n    })\n  } else if (token != null && Array.isArray(token.content)) {\n    token.content.forEach((_tok: any) => processToken(_tok, value))\n  } else if (token != null && token.content != null) {\n    token.content.toString().split('').forEach((_char: string) => {\n      const char: TextCharacter  = {\n        styles: [token.type],\n        char: _char\n      }\n      value.push(char)\n    })\n  }\n}\n\nconst Code = (props: any) => {\n  const { block, children } = props\n  const text = valueToText(block.value.slice(3))\n  const matches = text.match(/^([a-z]+)\\s/)\n  if (matches != null && prism.languages[matches[1]] != null) {\n    const value: TextCharacter[] = block.value.slice(0, 3 + matches[0].length)\n    const actualText = text.substr(matches[0].length)\n    const tokens = prism.tokenize(actualText, prism.languages[matches[1]])\n    tokens.forEach((token) => processToken(token, value))\n\n    block.fragments = createTextFragments(value)\n    return <pre style={{ color: 'white', background: 'black', padding: '1em'}}>\n      <EditorText {...props} block={block} />\n    </pre>\n  } else {\n    return <pre>\n      {children}\n    </pre>\n  }\n}\n\nconst reduceToText = (fragments: Fragment[]): string => {\n  return fragments.reduce((currentText, fragment) => {\n    if ('fragments' in fragment) {\n      return currentText + reduceToText(fragment.fragments)\n    } else {\n      return currentText + fragment.text\n    }\n  }, '')\n}\n\nconst App = () => {\n  const [editorState, setEditorState] = useState(() => EditorState.fromJSON({\n    text,\n    ranges: [],\n    entityMap: {}\n  }))\n\n  return (\n    <Editor\n      htmlAttrs={{ spellCheck: false, autoFocus: true, className: 'editor'}}\n      onChange={setEditorState}\n      renderStyle={(props) => {\n        return <span className={`token ${props.style}`}>{props.children}</span>\n      }}\n      renderBlock={(props) => {\n        const { htmlAttrs, children, block } = props\n        const text = reduceToText(block.fragments)\n\n        if (text.startsWith('# ')) {\n          return <h1 {...htmlAttrs}>{children}</h1>\n        }\n\n        if (text.startsWith('## ')) {\n          return <h2 {...htmlAttrs}>{children}</h2>\n        }\n\n        if (text.startsWith('### ')) {\n          return <h3 {...htmlAttrs}>{children}</h3>\n        }\n\n        if (text.startsWith('> ')) {\n          return <blockquote {...htmlAttrs}>{children}</blockquote>\n        }\n\n        if (text.startsWith('```')) {\n          return <Code {...props} />\n        }\n\n        return <div {...htmlAttrs}>{children}</div>\n      }}\n      editorState={editorState}\n    />\n  );\n}\n\nexport default App;\n","import * as React from 'react';\nimport { useState } from 'react'\nimport styled from 'styled-components'\n\ntype Props = {\n  styles: Object,\n  onChange: (styles: Object) => void,\n  onSelectStyle: (style: string) => void\n}\n\nconst Toggle = styled.div`\nbackground: none;\noutline: none;\ncursor: pointer;\nposition: absolute;\nleft: 0;\ntop: calc(50% - 10px);\nwhite-space: pre;\n`\n\nconst Aside = styled.aside`\n  position: relative;\n  padding: .8em;\n  height: 100%;\n  border-left: 1px solid #ccc;\n\n  input, select, textarea, button {\n    width: 100%;\n    margin-bottom: 1em;\n    font-size: 0.8em;\n    border-radius: 3px;\n    outline: none;\n  }\n\n  input {\n    padding: .3em;\n    border: 1px solid #ccc;\n  }\n\n  textarea {\n    min-height: 150px;\n  }\n\n  label {\n    display: flex;\n    width: 100%;\n  }\n\n  select {\n    margin-right: 1em;\n  }\n\n  button {\n    width: auto;\n    background: #000;\n    padding: .3em .5em;\n    border: none;\n    color: #fff;\n  }\n`\n\nconst Inside = styled.div`\n  min-width: 400px;\n`\n\nexport default ({\n  styles,\n  onSelectStyle,\n  onChange\n}: Props) => {\n  const [isOpen, setIsOpen] = useState(true)\n  const [selectedStyle, setSelectedStyle] = useState('')\n  const styleKeys = Object.keys(styles)\n  const onKeyUp = (event: any) => {\n    if (event.key === 'Enter') {\n      const name = event.target.value\n      onChange({\n        ...styles,\n        [name]: ''\n      })\n      setSelectedStyle(name)\n    }\n  }\n\n  const onStyleChange = (event: any) => {\n    onChange({\n      ...styles,\n      [selectedStyle]: event.target.value\n    })\n  }\n\n  const style = styles[selectedStyle]\n\n  const onAssign = (event: any) => {\n    event.preventDefault()\n    onSelectStyle(selectedStyle)\n  }\n\n  const onRemove = () => {\n    const newStyles = {\n      ...styles\n    }\n    delete newStyles[selectedStyle]\n    onChange(newStyles)\n    setSelectedStyle('')\n  }\n\n  return <Aside>\n    {isOpen && <Inside>\n      <label>\n        <select value={selectedStyle} onChange={(event) => setSelectedStyle(event.target.value)}>\n          <option value={\"\"}>None</option>\n          {styleKeys.map(key => <option key={key} >{key}</option>)}\n        </select>\n        <button onMouseDown={onAssign}>Assign</button>\n      </label>\n      {style != null\n        ? <div>\n            <textarea value={style} onChange={onStyleChange} />\n            <button onMouseDown={onRemove}>Remove</button>\n          </div>\n        : <div>\n            <input onKeyUp={onKeyUp} type=\"text\" placeholder=\"Add new style, press Enter\" />\n        </div>\n      }\n    </Inside>}\n    <Toggle onClick={() => setIsOpen(!isOpen)}>{isOpen ? '  〉': '〈' }</Toggle>\n  </Aside>\n}","import * as React from 'react'\nimport { EditorState, getBlockForIndex } from '@zettel/core'\nimport Editor from '@zettel/react'\n\nimport createPersistedState from 'use-persisted-state';\nimport styled from 'styled-components'\nimport StyleEditor from './StyleEditor'\nimport './index.css'\n\nconst Container = styled.div`\n  display: flex;\n  padding: 0;\n  height: 100%;\n  border-top: 1px solid #ccc;\n  .editor {\n    padding: 0;\n  }\n`\n\nconst text = '[One Line][Another Line]'\nconst useStyles = createPersistedState('element-styles')\nconst useEditorState = createPersistedState('editor-state')\n\nconst App = () => {\n  const [styles, setStyles] = useStyles({})\n\n  const [editorState, setEditorState] = useEditorState(() => EditorState.fromJSON({\n    text,\n    ranges: [],\n    entityMap: {}\n  }))\n    console.log(editorState)\n\n  const onSelectStyle = (style: string) => {\n    const { start, end, list } = editorState\n    const isCollapsed = start === end\n    const styleList = style ? [style] : []\n\n    if (isCollapsed) {\n      const { blockOffset } = getBlockForIndex(list.value, start)\n      const value = [{\n        ...list.value[blockOffset],\n        styles: styleList\n      }]\n      setEditorState(\n        editorState\n          .change({ start: blockOffset - 1, end: blockOffset, value })\n          .change({ start, end })\n      )\n    } else {\n      const currentSelectedValue = list.value.slice(start + 1, end + 1)\n      const value = currentSelectedValue.map(val => ({\n        ...val,\n        styles: styleList\n      }))\n      setEditorState(editorState.change({ value }))\n    }\n  }\n\n  return (\n    <Container>\n      <Editor\n        htmlAttrs={{ className: 'editor'}}\n        renderStyle={({ style, children }) => {\n          const Fragment = styled.span`\n          ${styles[style]}\n          `\n\n          return <Fragment>{children}</Fragment>\n        }}\n        renderBlock={({ block, children, htmlAttrs}) => {\n          const [style] = block.styles\n          const Block = styled.div`\n            ${styles[style]}\n          `\n          return <Block {...htmlAttrs}>\n            {children}\n          </Block>\n        }}\n        onChange={setEditorState}\n        editorState={editorState}\n      />\n      <StyleEditor onSelectStyle={onSelectStyle} styles={styles} onChange={setStyles} />\n  </Container>\n  );\n}\n\nexport default App;\n","import * as React from 'react';\nimport { useState } from 'react'\nimport { EditorState } from '@zettel/core'\nimport Editor from '@zettel/react'\nimport styled from 'styled-components'\n\nconst Container = styled.div`\n  display: flex;\n  padding: 0;\n  height: 100%;\n`\n\nconst Error = styled.span`\n  color: #f00;\n  font-weight: bold;\n  font-size: .8em;\n`\n\nconst Aside = styled.aside`\n  position: relative;\n  border-top: 1px solid #ccc;\n  padding: .8em;\n  height: 100%;\n  width: 400px;\n  background: #f0f0f0;\n  border-left: 1px solid #ccc;\n\n  input, select, textarea, button {\n    width: 100%;\n    margin-bottom: 1em;\n    font-size: 0.8em;\n    border-radius: 3px;\n    outline: none;\n  }\n\n  input {\n    padding: .3em;\n    border: 1px solid #ccc;\n  }\n\n  textarea {\n    min-height: 300px;\n    white-space: pre;\n    border: none;\n    padding: .5em;\n    border: 1px solid #ccc;\n    font-family: monospace;\n  }\n\n  label {\n    display: flex;\n    width: 100%;\n  }\n\n  select {\n    margin-right: 1em;\n  }\n\n  button {\n    width: auto;\n    background: #000;\n    padding: .3em .5em;\n    border: none;\n    color: #fff;\n  }\n`\n\nconst text = `[One 😅Line][And another line of text][And another line]`\n\nconst App = () => {\n  const [currentChanges, setCurrentChanges] = useState(`[{\n  \"start\": 3,\n  \"end\": 3,\n  \"value\": [{\n    \"char\": \"🔥\"\n  }]\n}]`)\n  const [hasError, setHasError] = useState(false)\n  const [editorState, setEditorState] = useState(() => EditorState.fromJSON({\n    text,\n    ranges: [],\n    entityMap: {}\n  }))\n\n  const onChangeChange = (event: any) => {\n    setHasError(false)\n    setCurrentChanges(event.target.value)\n  }\n\n  const submitChange = () => {\n    try {\n      const changes = JSON.parse(currentChanges)\n      if (!Array.isArray(changes)) {\n        // @ts-ignore\n        throw new Error(\"SO DUMB\")\n      }\n      let newEditorState = editorState\n      changes.forEach(change => {\n        newEditorState = editorState.change(change)\n      })\n      setEditorState(newEditorState)\n    } catch (err) {\n      setHasError(true)\n    }\n  }\n\n  return (\n    <Container>\n      <Editor\n        htmlAttrs={{ spellCheck: false, autoFocus: true, className: 'editor'}}\n        onChange={setEditorState}\n        editorState={editorState}\n      />\n      <Aside>\n        {hasError && <Error>Your JSON sucks, fix it</Error>}\n        <textarea\n        onKeyDown={(event: any) => {\n          if (event.key === 'Enter' && event.metaKey) {\n            submitChange()\n          }\n        }}\n        onChange={onChangeChange} value={currentChanges}/>\n        <button onClick={submitChange}>Change</button>\n      </Aside>\n    </Container>\n  );\n}\n\nexport default App;\n","import * as React from 'react';\nimport { useState } from 'react'\nimport Draggable from 'react-draggable';\nimport { EditorState } from '@zettel/core'\nimport Editor, { RenderBlock } from '@zettel/react'\nimport './index.css'\n\nconst text = `[One Line][Another line][And another line]`\n\nconst emptyPositions: { [key: string]: {x: number, y: number} } = {}\n\nconst App = () => {\n  const [editorState, setEditorState] = useState(() => EditorState.fromJSON({\n    text,\n    ranges: [],\n    entityMap: {}\n  }))\n\n  const [positions, setPosition] = useState(emptyPositions);\n\n  const updatePosition = (key: string, x: number, y: number) => {\n    setPosition({\n      ...positions,\n      [key]: { x, y }\n    })\n  }\n\n  const getPosition = (key: string) => {\n    return positions[key]\n  }\n\n  const renderBlock: RenderBlock = (props) => {\n    const { htmlAttrs, children, block } = props\n\n    return <Draggable\n      handle=\".handle\"\n      position={getPosition(block.blockKey)}\n      onStop={(event, { x, y }) => {\n        updatePosition(block.blockKey, x, y)\n      }}\n      scale={1}\n    >\n      <div>\n        <div contentEditable={false} className=\"handle\"></div>\n        <div {...htmlAttrs}>{children}</div>\n      </div>\n    </Draggable>\n  }\n\n  return (\n    <Editor\n      htmlAttrs={{ spellCheck: false, autoFocus: true, className: 'editor'}}\n      onChange={setEditorState}\n      renderBlock={renderBlock}\n      editorState={editorState}\n    />\n  );\n}\n\nexport default App;\n","import * as React from 'react'\nimport { EditorState, undo, redo } from '@zettel/core'\nimport './index.css'\n\ntype Props = {\n  editorState: EditorState,\n  onChange: (editorState: EditorState) => void\n}\n\ntype Method = (editorState: EditorState) => EditorState\n\nconst recurse = (num: number, editorState: EditorState, method: Method): EditorState => {\n  if (num === 0) {\n    return editorState\n  }\n  return recurse(num - 1, method(editorState), method)\n}\n\nexport default function Timeline({ editorState, onChange }: Props) {\n  const { undoStack, redoStack } = editorState\n  return <div className=\"timeline\">\n    {(undoStack.length + redoStack.length) === 0 && <span style={{color: '#fff'}}>Start typing something and you'll see your undo states appear here</span>}\n    {undoStack.map((_, index) => (\n      <button\n        onClick={() => onChange(recurse(undoStack.length - index, editorState, undo))}\n        className=\"undo-step\"\n      ></button>\n    ))}\n    {redoStack.map((item, index) => (\n      <button\n        onClick={() => onChange(recurse(index + 1, editorState, redo))}\n        className=\"redo-step\"\n      ></button>\n    ))}\n  </div>\n}\n\n","import * as React from 'react';\nimport { useState } from 'react'\nimport { EditorState } from '@zettel/core'\nimport Editor from '@zettel/react'\nimport Timeline from './Timeline'\n\nconst text = `[One][Two][Three]`\n\nconst App = () => {\n  const [editorState, setEditorState] = useState(() => EditorState.fromJSON({\n    text,\n    ranges: [],\n    entityMap: {}\n  }))\n\n  return (\n    <>\n      <Editor\n        htmlAttrs={{ spellCheck: false, autoFocus: true, className: 'editor'}}\n        onChange={setEditorState}\n        editorState={editorState}\n      />\n      <Timeline editorState={editorState} onChange={setEditorState} />\n    </>\n  );\n}\n\nexport default App;\n","import ItalicAndBold from  './ItalicAndBold'\nimport BlockStyling from './BlockStyling'\nimport PlainText from './PlainText'\nimport Tree from './Tree'\nimport Table from './Table'\nimport MarkdownTest from './MarkdownTest'\nimport Nocode from './Nocode'\nimport Changes from './Changes'\nimport Draggable from './Draggable'\nimport TimeTravel from './TimeTravel'\n\nconst Examples = {\n  'Plain Text': PlainText,\n  'Changes': Changes,\n  'Nocode': Nocode,\n  'Basic Text styling': ItalicAndBold,\n  'Block Styling': BlockStyling,\n  'Markdown': MarkdownTest,\n  'Recursive Structure': Tree,\n  'Draggable Blocks': Draggable,\n  'Table': Table,\n  'Time Travel': TimeTravel,\n}\n\nexport default Examples","import Typography from 'typography'\n\nconst typography = new Typography({\n  baseFontSize: '18px',\n  baseLineHeight: 1.666,\n  headerFontFamily: ['Helvetica Neue', 'Segoe UI', 'Helvetica', 'Arial', 'sans-serif'],\n  bodyFontFamily: ['Georgia', 'serif'],\n})\n\ntypography.injectStyles()","// @ts-ignore\nimport {importMDX} from 'mdx.macro'\nimport * as React from 'react';\nimport { useState, lazy, Suspense } from 'react';\nimport { render, hydrate} from 'react-dom';\nimport './index.css';\nimport { createBrowserHistory } from 'history'\nimport styled from 'styled-components'\nimport Examples from './examples'\nimport { Router, Route, Link, Switch } from 'react-router-dom'\nimport './typography'\n\nconst Readme = lazy(() => importMDX('../../README.md'))\nconst Changelog = lazy(() => importMDX('../../CHANGELOG.md'))\nconst Container = styled.article`\n  padding: 1em;\n`\n\nconst Content = ({ children }: { children: any}) =>\n  <Suspense fallback={<div>Loading...</div>}>\n    <Container>\n      {children}\n    </Container>\n  </Suspense>\n\nconst exampleModules: { [key: string]: any } = {...Examples}\n\ntype RouteComps = {\n  path: string,\n  component: any\n}[]\n\nconst _routeComps: RouteComps = Object.keys(Examples).map((key: string) => ({\n  name: key,\n  path: `/${key.toLowerCase().replace(/\\s/gi, '-')}`,\n  component: exampleModules[key]\n}))\n\n_routeComps.push({\n  path: `/changelog`,\n  component: () => (<Content><Changelog /></Content>)\n})\n\nconst history = createBrowserHistory()\n\ntype LayoutProps = {\n  children: React.ReactElement,\n  routeComps: RouteComps\n}\n\nconst Layout = ({ children, routeComps }: LayoutProps) => {\n  const [flag, setFlag] = useState(false)\n  const toggleFlag = () => setFlag(!flag)\n\n  return <main className={`app ${flag ? 'menu-toggled': ''}`}>\n    <button onClick={toggleFlag} id=\"menu-button\">&#x2630;</button>\n    <nav>\n      <ul>\n\n        <li><Link onMouseUp={toggleFlag} to={'/'}>Home</Link></li>\n        <li><Link onMouseUp={toggleFlag} to={'/changelog'}>Changelog</Link></li>\n        <li>\n          <h3>Examples:</h3>\n          <ul>\n            {routeComps.map((route: any, i) => (\n              <li onMouseUp={toggleFlag} key={`${route.path}-${i}`}><Link to={route.path}>{route.name}</Link></li>\n            ))}\n          </ul>\n        </li>\n      </ul>\n    </nav>\n    {children}\n  </main>\n}\n\nconst Root = () => <Router history={history}>\n  <Layout routeComps={_routeComps}>\n    <Switch>\n      {_routeComps.map((props) => <Route key={props.path} {...props} />)}\n      <Route render={() => <Content><Readme /></Content>} />\n    </Switch>\n  </Layout>\n</Router>\n\n\nconst rootElement = document.getElementById(\"root\");\n\nif (rootElement != null && rootElement.hasChildNodes()) {\n  hydrate(<Root />, rootElement);\n} else {\n  render(<Root />, rootElement);\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__1yaWD\"};"],"sourceRoot":""}